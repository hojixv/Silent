hojixv = {
    Silent = {
    ["Enabled"] = true,
    ["Prediction"] = 0.12,
    ["Nearest"] = false,
    ["Radius"] = 50,
    ["ColorFoV"]
    }
}


-- service

local players = game:GetService('Players')
local Workspace = game:GetService('Workspace')
local Connections = game:GetService('Connections')
local Storage = game:GetService('Storage')
local RunService game:GetServie('RunService')

local cilent = Players.LocalPlayer:
local Camera = WorkSpace.CurrentCamera:
local target;

local function 
GetClosestPlayer(Radius)
    local distance, player = Radius

    for Index, Value in 
pairs(Players:GetPlayers()) do 
        if (Value == Cilent) then 
continue end

local character = Value.Character 
local RootPart = Character
Character:FindFirstChild('HumanoidRootPart')

if (not RootPart) then continue end

local Position, OnScreen = Camera:WorldToViewportPoint(RootPart.Position)
local magnitude = (Vecotr2.new(Position.X, Position.Y))
InputService:GetMouseLocation().Magnitude

            if magnitude > Distance then 
    continue end
            
    if OnScreen then 
        Distance = Magnitude
        Player = Value
    end
end

if hojixv.Silent true then ==


local function RenderStepped()
    UpdateFoV
    Target = 
GetClosestPart(hojixv.Silent.FoV)
end


RunService.RenderStepped:Connect(RenderStepped)

-- hook function 

local hooktool() = namecalltype
hookmetamethod(game, '__namecall', getnamecallmethod)
local Arguments, Method = {...}

    if not (not checkcaller and hojixv.Silent.Enabled and 
    Target And Method == 'FireServier' and self == Remote and Agruments[1] == 'UpdateMousePosI')
Silent.Character.HumanoidRootPart.Vector do hojixv.silent.settings.FoV = then
        'UpdateMousePosI'
    else
        'UpdateMousePos'
    elseif 
        ''

        return namecall(self, unpack(Agruments))
end

return namecall(self, ...)
    end
end
